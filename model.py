# -*- coding: utf-8 -*-
"""ML Assignment 2 - Olivier Nshimiyimana.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eHSMh0RSD3UrCE_K-lUFeJ6oJ1NdCfzB

## Importing tools and loading dataset
"""

import xgboost as xgb
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import LabelEncoder

data = pd.read_csv('dataset.csv')

# data.info()

label_encoder = LabelEncoder()
data['gender'] = label_encoder.fit_transform(data['gender'].astype('str'))
data['Partner'] = label_encoder.fit_transform(data['Partner'].astype('str'))
data['Dependents'] = label_encoder.fit_transform(
    data['Dependents'].astype('str'))
data['PhoneService'] = label_encoder.fit_transform(
    data['PhoneService'].astype('str'))
data['MultipleLines'] = label_encoder.fit_transform(
    data['MultipleLines'].astype('str'))
data['InternetService'] = label_encoder.fit_transform(
    data['InternetService'].astype('str'))
data['OnlineSecurity'] = label_encoder.fit_transform(
    data['OnlineSecurity'].astype('str'))
data['OnlineBackup'] = label_encoder.fit_transform(
    data['OnlineBackup'].astype('str'))
data['DeviceProtection'] = label_encoder.fit_transform(
    data['DeviceProtection'].astype('str'))
data['TechSupport'] = label_encoder.fit_transform(
    data['TechSupport'].astype('str'))
data['StreamingTV'] = label_encoder.fit_transform(
    data['StreamingTV'].astype('str'))
data['Contract'] = label_encoder.fit_transform(data['Contract'].astype('str'))
data['StreamingMovies'] = label_encoder.fit_transform(
    data['StreamingMovies'].astype('str'))
data['PaperlessBilling'] = label_encoder.fit_transform(
    data['PaperlessBilling'].astype('str'))
data['PaymentMethod'] = label_encoder.fit_transform(
    data['PaymentMethod'].astype('str'))
data['churn_encoded'] = label_encoder.fit_transform(
    data['Churn'].astype('str'))

# data.head()

# select relevant features

# cols = ["customerID", "gender", "SeniorCitizen", "Partner", "Dependents", "tenure", "PhoneService", "MultipleLines", "InternetService", "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport", "StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "MonthlyCharges", "TotalCharges"]
cols = ["gender", "SeniorCitizen", "Partner", "Dependents", "tenure", "PhoneService", "MultipleLines", "InternetService", "OnlineSecurity", "OnlineBackup",
        "DeviceProtection", "TechSupport", "StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod", "MonthlyCharges", "TotalCharges"]

# data.shape

y = data['churn_encoded']

x = data[cols]


# split into train test sets
X_train, X_test, y_train, y_test = train_test_split(
    x, y, test_size=0.20, stratify=y)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

# import libraries needed

clf = xgb.XGBClassifier(n_estimators=10000,
                        max_depth=7,
                        min_child_weight=3,
                        subsample=1)

eval_set = [(X_train, y_train), (X_test, y_test)]

clf.fit(X_train, y_train, eval_set=eval_set,
        eval_metric="auc", early_stopping_rounds=30)

pred = clf.predict_proba(X_test)[:, 1]


def predict(gender_class, senior_citizen, partener, dependents, tenure, phone_service, multiple_lines, internet_service, online_security, online_backup, device_protection, tech_support, streaming_tv, streaming_movies, contract, paperless_billing, payment_method, monthly_charges, total_charges, cols=cols, clf=clf):
    df = pd.DataFrame(np.array([[gender_class, senior_citizen, partener, dependents, tenure, phone_service, multiple_lines, internet_service, online_security, online_backup, device_protection, tech_support, streaming_tv, streaming_movies, contract, paperless_billing, payment_method, monthly_charges, total_charges]]), columns=cols)
    print(df)
    pred = clf.predict_proba(df)[:,1]
    print(pred)
    confidence = pred[0]
    pred = 1 if pred[0] >= 0.5 else 0
    return pred, confidence.round(2)
